#Функция считает координаты точек пересечения двух окружностей
"""
Вход
Окружности задаются словарем со значениями: x - абсцисса центра окружности, y - ордината центра окружности, r - радиус окружности

Выход
На выходе функции список, состоящий из двух (одного) элементов
Если окружности пересекаются в двух точках, то первый элемент = 1, второй - список из двух словарей - координат точек пересечения окружности
Если окружности пересекаются в одной точке, то первый элемент = 2, второй - словарь с координатами этой точки
Если окружности не пересекаются, то список состоит из -1
"""
def CoordsCrossPointsCircles(Ccl1, Ccl2):
    H = {'x':0, 'y':0}; C = {'x':0, 'y':0}; D = {'x':0, 'y':0}
    distance = ((Ccl2['x'] - Ccl1['x']) ** 2 + (Ccl2['y'] - Ccl1['y']) ** 2) ** 0.5
    if (distance > Ccl1['r'] + Ccl2['r']) or (distance < abs(Ccl2['r'] - Ccl1['r'])):    #Нет точек пересечения
        return [-1]
    else:
        a = (Ccl1['r'] ** 2 - Ccl2['r'] ** 2 + distance ** 2) / (2 * distance)
        H['x'] = Ccl1['x'] + a * (Ccl2['x'] - Ccl1['x']) / distance
        H['y'] = Ccl1['y'] + a * (Ccl2['y'] - Ccl1['y']) / distance
        if distance == Ccl1['r'] + Ccl2['r']:     #Окружности пересекаются в одной точке
            return [1, H]
        h = (Ccl1['r'] ** 2 - a ** 2) ** 0.5 #Две точки пересечения
        C['x'] = H['x'] - h * (Ccl2['y'] - Ccl1['y']) / distance
        C['y'] = H['y'] + h * (Ccl2['x'] - Ccl1['x']) / distance
        D['x'] = H['x'] + h * (Ccl2['y'] - Ccl1['y']) / distance
        D['y'] = H['y'] - h * (Ccl2['x'] - Ccl1['x']) / distance
        return [2, C, D]

""" Пример входных данных

Circle1 = {'x':0, 'y':0, 'r':1}
Circle2 = {'x':2, 'y':0, 'r':1}

print(CoordsCrossPointsCircles(Circle1, Circle2))
"""
#Ответ: [1, {'x': 1.0, 'y': 0.0}]
